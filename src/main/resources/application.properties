#MariaDb connection
#spring.datasource.url=jdbc:mariadb://172.16.0.6:3306/rentafincas?serverTimeZone=UTC
#spring.datasource.username=rentafincas
#spring.datasource.password=qa12pl09
#spring.datasource.driver-class-name =org.mariadb.jdbc.Driver

#H2M
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


##GITHUB TOKEN
spring.security.oauth2.client.registration.github.clientId=40b5d77df66358071452
spring.security.oauth2.client.registration.github.clientSecret=78010430d7cc5262f8fe80a67548e946e07a6ca3
#Mysql
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/rentafincas?useSSL=false&serverTimeZone=UTC&allowPublicKeyRetrieval=true
spring.datasource.username=username
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#Mostrar sql
spring.jpa.properties.hibernate.forma_sql=true
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

#Tomcat Listening Port
server.port=2109

#Allow hibernate to create tables in the databse automatically (create, create-drop, validate, and update)
#https://stackoverflow.com/questions/42135114/how-does-spring-jpa-hibernate-ddl-auto-property-exactly-work-in-spring
#create – Hibernate first drops existing tables, then creates new tables
#update – the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application
#create-drop – similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing
#validate – Hibernate only validates whether the tables and columns exist, otherwise it throws an exception
#none – this value effectively turns off the DDL generation
#
#spring.jpa.generate-ddl=true
#spring.jpa.hibernate.ddl-auto=update
